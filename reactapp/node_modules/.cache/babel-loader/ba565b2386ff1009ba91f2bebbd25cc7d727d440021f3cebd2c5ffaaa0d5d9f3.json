{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Malikrot\\\\source\\\\repos\\\\BoockClub\\\\reactapp\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport FormLabel from '@mui/material/FormLabel';\nimport BooksWindow from './booksWindow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  //constructor(props) {\n  //    super(props);\n  //    this.state = { books: [], loading: false };\n  //}\n\n  //componentDidMount() {\n  //    this.getBooks();\n  //}\n\n  //static renderForecastsTable(books) {\n  //    return (\n  //        <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n  //            <thead> \n  //                <tr>\n  //                    <th>Name</th>\n  //                </tr>\n  //            </thead>\n  //            <tbody>\n  //                {books.map(books =>\n  //                    <tr key={books.name}>\n  //                        <td>{books.name}</td>\n  //                    </tr>\n  //                )}\n  //            </tbody>\n  //        </table>\n  //    );\n  //}\n  render() {\n    //let contents = this.state.loading\n    //    ? <p><em>Loading... Please refresh once the ASP.NET backend has started. See <a href=\"https://aka.ms/jspsintegrationreact\">https://aka.ms/jspsintegrationreact</a> for more details.</em></p>\n    //    : App.renderForecastsTable(this.state.books);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"tabelLabel\",\n        children: \"Weather forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This component demonstrates fetching data from the server.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BooksWindow, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n\n  //async getBooks() {\n  //    const response = await fetch('api/');\n  //    const data = await response.json();\n  //    this.setState({ books: data, loading: false });\n  //}\n}\nApp.displayName = App.name;","map":{"version":3,"names":["React","Component","FormLabel","BooksWindow","jsxDEV","_jsxDEV","App","render","children","id","fileName","_jsxFileName","lineNumber","columnNumber","displayName","name"],"sources":["C:/Users/Malikrot/source/repos/BoockClub/reactapp/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport BooksWindow from './booksWindow';\r\n\r\nexport default class App extends Component\r\n{\r\n    static displayName = App.name;\r\n\r\n    //constructor(props) {\r\n    //    super(props);\r\n    //    this.state = { books: [], loading: false };\r\n    //}\r\n\r\n    //componentDidMount() {\r\n    //    this.getBooks();\r\n    //}\r\n\r\n    //static renderForecastsTable(books) {\r\n    //    return (\r\n    //        <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n    //            <thead> \r\n    //                <tr>\r\n    //                    <th>Name</th>\r\n    //                </tr>\r\n    //            </thead>\r\n    //            <tbody>\r\n    //                {books.map(books =>\r\n    //                    <tr key={books.name}>\r\n    //                        <td>{books.name}</td>\r\n    //                    </tr>\r\n    //                )}\r\n    //            </tbody>\r\n    //        </table>\r\n    //    );\r\n    //}\r\n\r\n    render()\r\n    {\r\n        //let contents = this.state.loading\r\n        //    ? <p><em>Loading... Please refresh once the ASP.NET backend has started. See <a href=\"https://aka.ms/jspsintegrationreact\">https://aka.ms/jspsintegrationreact</a> for more details.</em></p>\r\n        //    : App.renderForecastsTable(this.state.books);\r\n\r\n        return (\r\n            <div>\r\n                <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n                <p>This component demonstrates fetching data from the server.</p>\r\n                <BooksWindow />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //async getBooks() {\r\n    //    const response = await fetch('api/');\r\n    //    const data = await response.json();\r\n    //    this.setState({ books: data, loading: false });\r\n    //}\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,MAAMC,GAAG,SAASL,SAAS,CAC1C;EAGI;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAM,MAAMA,CAAA,EACN;IACI;IACA;IACA;;IAEA,oBACIF,OAAA;MAAAG,QAAA,gBACIH,OAAA;QAAII,EAAE,EAAC,YAAY;QAAAD,QAAA,EAAE;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1CR,OAAA;QAAAG,QAAA,EAAG;MAA0D;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACjER,OAAA,CAACF,WAAW;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAEd;;EAEA;EACA;EACA;EACA;EACA;AACJ;AApDqBP,GAAG,CAEbQ,WAAW,GAAGR,GAAG,CAACS,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}