{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Malikrot\\\\source\\\\repos\\\\BoockClub\\\\reactapp\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport FormLabel from '@mui/material/FormLabel';\nimport BooksWindow from './booksWindow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      books: [],\n      loading: false\n    };\n  }\n\n  //componentDidMount() {\n  //    this.getBooks();\n  //}\n\n  static renderForecastsTable(books) {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      \"aria-labelledby\": \"tabelLabel\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: books.map(books => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            children: books.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this)\n        }, books.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  }\n  render() {\n    let contents = this.state.loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: [\"Loading... Please refresh once the ASP.NET backend has started. See \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://aka.ms/jspsintegrationreact\",\n          children: \"https://aka.ms/jspsintegrationreact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 90\n        }, this), \" for more details.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 15\n    }, this) : App.renderForecastsTable(this.state.books);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"tabelLabel\",\n        children: \"Weather forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This component demonstrates fetching data from the server.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BooksWindow, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n\n  //async getBooks() {\n  //    const response = await fetch('api/');\n  //    const data = await response.json();\n  //    this.setState({ books: data, loading: false });\n  //}\n}\nApp.displayName = App.name;","map":{"version":3,"names":["React","Component","FormLabel","BooksWindow","jsxDEV","_jsxDEV","App","constructor","props","state","books","loading","renderForecastsTable","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","name","render","contents","href","id","displayName"],"sources":["C:/Users/Malikrot/source/repos/BoockClub/reactapp/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport BooksWindow from './booksWindow';\r\n\r\nexport default class App extends Component\r\n{\r\n    static displayName = App.name;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { books: [], loading: false };\r\n    }\r\n\r\n    //componentDidMount() {\r\n    //    this.getBooks();\r\n    //}\r\n\r\n    static renderForecastsTable(books) {\r\n        return (\r\n            <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {books.map(books =>\r\n                        <tr key={books.name}>\r\n                            <td>{books.name}</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    render()\r\n    {\r\n        let contents = this.state.loading\r\n            ? <p><em>Loading... Please refresh once the ASP.NET backend has started. See <a href=\"https://aka.ms/jspsintegrationreact\">https://aka.ms/jspsintegrationreact</a> for more details.</em></p>\r\n            : App.renderForecastsTable(this.state.books);\r\n\r\n        return (\r\n            <div>\r\n                <h1 id=\"tabelLabel\" >Weather forecast</h1>\r\n                <p>This component demonstrates fetching data from the server.</p>\r\n                <BooksWindow/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //async getBooks() {\r\n    //    const response = await fetch('api/');\r\n    //    const data = await response.json();\r\n    //    this.setState({ books: data, loading: false });\r\n    //}\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,MAAMC,GAAG,SAASL,SAAS,CAC1C;EAGIM,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MAAEC,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE;IAAM,CAAC;EAC9C;;EAEA;EACA;EACA;;EAEA,OAAOC,oBAAoBA,CAACF,KAAK,EAAE;IAC/B,oBACIL,OAAA;MAAOQ,SAAS,EAAC,qBAAqB;MAAC,mBAAgB,YAAY;MAAAC,QAAA,gBAC/DT,OAAA;QAAAS,QAAA,eACIT,OAAA;UAAAS,QAAA,eACIT,OAAA;YAAAS,QAAA,EAAI;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACb;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACRb,OAAA;QAAAS,QAAA,EACKJ,KAAK,CAACS,GAAG,CAACT,KAAK,iBACZL,OAAA;UAAAS,QAAA,eACIT,OAAA;YAAAS,QAAA,EAAKJ,KAAK,CAACU;UAAI;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAAC,GADhBR,KAAK,CAACU,IAAI;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEf,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEhB;EAEAG,MAAMA,CAAA,EACN;IACI,IAAIC,QAAQ,GAAG,IAAI,CAACb,KAAK,CAACE,OAAO,gBAC3BN,OAAA;MAAAS,QAAA,eAAGT,OAAA;QAAAS,QAAA,GAAI,sEAAoE,eAAAT,OAAA;UAAGkB,IAAI,EAAC,qCAAqC;UAAAT,QAAA,EAAC;QAAmC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,sBAAkB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAC3LZ,GAAG,CAACM,oBAAoB,CAAC,IAAI,CAACH,KAAK,CAACC,KAAK,CAAC;IAEhD,oBACIL,OAAA;MAAAS,QAAA,gBACIT,OAAA;QAAImB,EAAE,EAAC,YAAY;QAAAV,QAAA,EAAE;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1Cb,OAAA;QAAAS,QAAA,EAAG;MAA0D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACjEb,OAAA,CAACF,WAAW;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAEd;;EAEA;EACA;EACA;EACA;EACA;AACJ;AApDqBZ,GAAG,CAEbmB,WAAW,GAAGnB,GAAG,CAACc,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}