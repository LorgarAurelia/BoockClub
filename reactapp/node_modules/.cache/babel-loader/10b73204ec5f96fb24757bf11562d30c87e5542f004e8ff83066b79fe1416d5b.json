{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Malikrot\\\\source\\\\repos\\\\BoockClub\\\\reactapp\\\\src\\\\booksToRead.js\";\nimport React, { Component } from 'react';\nimport { styled } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class BooksToReed extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jwt: this.props.jwt,\n      books: [],\n      loading: true\n    };\n  }\n  componentDidMount() {\n    this.getBooks();\n  }\n\n  //static renderBooksTable(books, onClick) {\n  //    const StyledTableCell = styled(TableCell)(({ theme }) => ({\n  //        [`&.${tableCellClasses.head}`]: {\n  //            backgroundColor: theme.palette.common.black,\n  //            color: theme.palette.common.white,\n  //        },\n  //        [`&.${tableCellClasses.body}`]: {\n  //            fontSize: 14,\n  //        },\n  //    }));\n\n  //    const StyledTableRow = styled(TableRow)(({ theme }) => ({\n  //        '&:nth-of-type(odd)': {\n  //            backgroundColor: theme.palette.action.hover,\n  //        },\n\n  //        '&:last-child td, &:last-child th': {\n  //            border: 0,\n  //        },\n  //    }));\n  //    return (\n  //        <TableContainer component={Paper}>\n  //            <Table sx={{ minWidth: 700 }} aria-label=\"Books\">\n  //                <TableHead>\n  //                    <TableRow>\n  //                        <StyledTableCell>Books</StyledTableCell>\n  //                        <StyledTableCell>Add book</StyledTableCell>\n  //                    </TableRow>\n  //                </TableHead>\n  //                <TableBody>\n  //                    {books.map(books =>\n  //                        <StyledTableRow key={books.name}>\n  //                            <div className = \"hidden\">\n  //                                <StyledTableCell>\n  //                                    {books.id }\n  //                                </StyledTableCell>\n  //                            </div>\n  //                            <StyledTableCell component=\"th\" scope=\"row\">\n  //                                {books.name}\n  //                            </StyledTableCell>\n  //                            <StyledTableCell>\n  //                                <Button onClick={onClick.bind(books.name) }>Add</Button>\n  //                            </StyledTableCell>\n\n  //                        </StyledTableRow>\n  //                    )}\n  //                </TableBody>\n  //            </Table>\n  //        </TableContainer>);\n  //}\n\n  render() {\n    //let contents = this.state.loading\n    //    ? <p>Loading... </p>\n    //    : BooksToReed.renderBooksTable(this.state.books, this.postBookToReed.bind(this));\n\n    const StyledTableCell = styled(TableCell)(_ref => {\n      let {\n        theme\n      } = _ref;\n      return {\n        [`&.${tableCellClasses.head}`]: {\n          backgroundColor: theme.palette.common.black,\n          color: theme.palette.common.white\n        },\n        [`&.${tableCellClasses.body}`]: {\n          fontSize: 14\n        }\n      };\n    });\n    const StyledTableRow = styled(TableRow)(_ref2 => {\n      let {\n        theme\n      } = _ref2;\n      return {\n        '&:nth-of-type(odd)': {\n          backgroundColor: theme.palette.action.hover\n        },\n        '&:last-child td, &:last-child th': {\n          border: 0\n        }\n      };\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TableContainer, {\n        component: Paper,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          sx: {\n            minWidth: 700\n          },\n          \"aria-label\": \"Books\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: \"Books\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: \"Add book\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: this.state.books.map(books => /*#__PURE__*/_jsxDEV(StyledTableRow, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"hidden\",\n                children: /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                  children: books.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                component: \"th\",\n                scope: \"row\",\n                children: books.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  value: books.name,\n                  onClick: this.postBookToReed.bind(books.name),\n                  children: \"Add\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 37\n              }, this)]\n            }, books.name, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  }\n  async getBooks() {\n    const response = await fetch('api/');\n    const data = await response.json();\n    this.setState({\n      books: data,\n      loading: false\n    });\n  }\n  async postBookToReed(event, id) {\n    alert(id);\n    //const response = await fetch(\n    //    'APIURL',\n    //    { method: 'POST', headers: { accept: '*/*', bearer: this.state.jwt } });\n    //SHOW SOME MESSAGE THAT BOCK SUCCESFULLY SEND\n  }\n}","map":{"version":3,"names":["React","Component","styled","Table","TableBody","TableCell","tableCellClasses","TableContainer","TableHead","TableRow","Paper","Button","jsxDEV","_jsxDEV","BooksToReed","constructor","props","state","jwt","books","loading","componentDidMount","getBooks","render","StyledTableCell","_ref","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","_ref2","action","hover","border","children","component","sx","minWidth","fileName","_jsxFileName","lineNumber","columnNumber","map","className","id","scope","name","value","onClick","postBookToReed","bind","response","fetch","data","json","setState","event","alert"],"sources":["C:/Users/Malikrot/source/repos/BoockClub/reactapp/src/booksToRead.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\n\r\nexport default class BooksToReed extends Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { jwt: this.props.jwt, books: [], loading: true }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getBooks();\r\n    }\r\n\r\n    //static renderBooksTable(books, onClick) {\r\n    //    const StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    //        [`&.${tableCellClasses.head}`]: {\r\n    //            backgroundColor: theme.palette.common.black,\r\n    //            color: theme.palette.common.white,\r\n    //        },\r\n    //        [`&.${tableCellClasses.body}`]: {\r\n    //            fontSize: 14,\r\n    //        },\r\n    //    }));\r\n\r\n    //    const StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n    //        '&:nth-of-type(odd)': {\r\n    //            backgroundColor: theme.palette.action.hover,\r\n    //        },\r\n\r\n    //        '&:last-child td, &:last-child th': {\r\n    //            border: 0,\r\n    //        },\r\n    //    }));\r\n    //    return (\r\n    //        <TableContainer component={Paper}>\r\n    //            <Table sx={{ minWidth: 700 }} aria-label=\"Books\">\r\n    //                <TableHead>\r\n    //                    <TableRow>\r\n    //                        <StyledTableCell>Books</StyledTableCell>\r\n    //                        <StyledTableCell>Add book</StyledTableCell>\r\n    //                    </TableRow>\r\n    //                </TableHead>\r\n    //                <TableBody>\r\n    //                    {books.map(books =>\r\n    //                        <StyledTableRow key={books.name}>\r\n    //                            <div className = \"hidden\">\r\n    //                                <StyledTableCell>\r\n    //                                    {books.id }\r\n    //                                </StyledTableCell>\r\n    //                            </div>\r\n    //                            <StyledTableCell component=\"th\" scope=\"row\">\r\n    //                                {books.name}\r\n    //                            </StyledTableCell>\r\n    //                            <StyledTableCell>\r\n    //                                <Button onClick={onClick.bind(books.name) }>Add</Button>\r\n    //                            </StyledTableCell>\r\n                                \r\n    //                        </StyledTableRow>\r\n    //                    )}\r\n    //                </TableBody>\r\n    //            </Table>\r\n    //        </TableContainer>);\r\n    //}\r\n\r\n    render() {\r\n        //let contents = this.state.loading\r\n        //    ? <p>Loading... </p>\r\n        //    : BooksToReed.renderBooksTable(this.state.books, this.postBookToReed.bind(this));\r\n\r\n        const StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n            [`&.${tableCellClasses.head}`]: {\r\n                backgroundColor: theme.palette.common.black,\r\n                color: theme.palette.common.white,\r\n            },\r\n            [`&.${tableCellClasses.body}`]: {\r\n                fontSize: 14,\r\n            },\r\n        }));\r\n\r\n        const StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n            '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n            },\r\n\r\n            '&:last-child td, &:last-child th': {\r\n                border: 0,\r\n            },\r\n        }));\r\n\r\n        return (\r\n            <div>\r\n                <TableContainer component={Paper}>\r\n                    <Table sx={{ minWidth: 700 }} aria-label=\"Books\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <StyledTableCell>Books</StyledTableCell>\r\n                                <StyledTableCell>Add book</StyledTableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {this.state.books.map(books =>\r\n                                <StyledTableRow key={books.name}>\r\n                                    <div className=\"hidden\">\r\n                                        <StyledTableCell>\r\n                                            {books.id}\r\n                                        </StyledTableCell>\r\n                                    </div>\r\n                                    <StyledTableCell component=\"th\" scope=\"row\">\r\n                                        {books.name}\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell>\r\n                                        <Button value={ books.name  } onClick={this.postBookToReed.bind(books.name)}>Add</Button>\r\n                                    </StyledTableCell>\r\n\r\n                                </StyledTableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    async getBooks() {\r\n        const response = await fetch('api/');\r\n        const data = await response.json();\r\n        this.setState({ books: data, loading: false });\r\n    }\r\n\r\n    async postBookToReed(event, id) {\r\n        alert(id);\r\n        //const response = await fetch(\r\n        //    'APIURL',\r\n        //    { method: 'POST', headers: { accept: '*/*', bearer: this.state.jwt } });\r\n        //SHOW SOME MESSAGE THAT BOCK SUCCESFULLY SEND\r\n    }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}